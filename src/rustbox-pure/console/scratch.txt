/*
BEGINNING OF CODE FOR RESIZE HOOK

static mut console_window: HWND = 0 as HWND;
static mut console_handle: Handle = Handle {input: 0 as HANDLE, output: 0 as HANDLE};

pub fn co_initialize() {
    let result = unsafe { CoInitializeEx(0 as LPVOID, COINIT_APARTMENTTHREADED) };
}

pub fn co_uninitialize() {
    unsafe { CoUninitialize(); }
}

pub fn event_hook() -> HWINEVENTHOOK {
    unsafe {
        SetWinEventHook(
            EVENT_SYSTEM_MOVESIZESTART as UINT,
            EVENT_SYSTEM_MOVESIZEEND as UINT,
            0 as HMODULE,
            callback as WINEVENTPROC,
            0,
            0,
            WINEVENT_OUTOFCONTEXT
        )
    }
}

pub fn event_unhook(hook: HWINEVENTHOOK) {
    unsafe { UnhookWinEvent(hook); }
}

pub fn get_message() -> Option<MSG> {

    let mut message = MSG {
        hwnd: 0 as HWND,
        message: 0 as UINT,
        wParam: 0 as WPARAM,
        lParam: 0 as LPARAM,
        time: 0 as DWORD,
        pt: POINT {x: 0 as LONG, y: 0 as LONG}
    };

    let result: BOOL = unsafe {
        GetMessageW(&mut message as LPMSG, 0 as HWND, 0 as UINT, 0 as UINT)
    };

    if result != 0 { Some(message) } else { None }
}

pub fn hook_monitor(handle: Handle) -> JoinHandle<()>
{
    unsafe { console_handle = handle; }
    unsafe { set_buffer_size(console_handle, Size {width: 800, height: 800}); }

    thread::spawn(move || {
        store_hwnd();
        set_scroll_enable(false);

        co_initialize();

        let hook = event_hook();
        while let Some(msg) = get_message() {}

        event_unhook(hook);
        co_uninitialize();
    })
}

extern fn callback(hWinEventHook: HWINEVENTHOOK, event: DWORD, hwnd: HWND, idObject: LONG, idChild: LONG, dwEventThread: DWORD, dwmsEventTime: DWORD) -> () {
    let for_console = unsafe { hwnd == console_window };

    if(for_console) {
        match(event) {
            EVENT_SYSTEM_MOVESIZESTART => resize_start(),
            EVENT_SYSTEM_MOVESIZEEND => resize_stop(),
            _ => {}
        }
    }
}

pub fn resize_start() {
}

pub fn resize_stop() {
}*/
